{"version":3,"sources":["../node_modules/managed-timeout/dist sync","hooks/WindowDimensions.tsx","utils/calculateBarWidth.ts","components/Bar/index.ts","components/Bar/Bar.tsx","pages/Home/index.tsx","pages/Home/Home.tsx","algorithms/mergeSort.ts","algorithms/quickSort.ts","algorithms/heapSort.ts","algorithms/bubbleSort.ts","algorithms/insertionSort.ts","algorithms/selectionSort.ts","components/Navbar/components/Algorithms/index.ts","components/Navbar/components/Algorithms/Algorithms.tsx","config.ts","utils/animate.ts","components/Navbar/components/SecondaryButtons/index.ts","components/Navbar/components/SecondaryButtons/SecondaryButtons.tsx","components/Navbar/components/ArraySize/ArraySize.tsx","components/Navbar/components/ArraySize/index.ts","components/Navbar/components/AnimationSpeed/AnimationSpeed.tsx","components/Navbar/components/AnimationSpeed/index.ts","utils/generateArray.ts","components/Navbar/Navbar.tsx","components/Navbar/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","calculateBarWidth","arrayLength","Math","floor","Bar","array","WindowDimensions","barWidth","length","style","className","map","value","idx","Home","mergeSortHelper","mainArray","startIdx","endIdx","extraArray","animateValues","middleIdx","k","i","j","isLastMerge","push","doMerge","mergeSort","arrayCopy","quickSortHelper","pividIdx","firstIdx","secondIdx","swap","temp","quickSort","siftDown","currentIdx","heap","childOneIdx","childTwoIdx","idxToSwap","heapSort","buildMaxHeap","bubbleSort","counter","isSorted","insertionSort","selectionSort","smallest","Algorithms","setChosenAlgorithm","setChosenAlgorithmName","isSorting","algorithmsList","name","onClick","mergeSortAlgorithm","quickSortAlgorithm","heapSortAlgorithm","bubbleSortAlgorithm","insertionSortAlgorithm","selectionSortAlgorithm","curAlgorithm","index","disabled","config","ARRAY_SIZE_DEFAULT","ARRAY_SIZE_MIN","ARRAY_SIZE_MAX","ARRAY_SIZE_STEP","ANIMATION_SPEED_DEFAULT","ANIMATION_SPEED_MIN","ANIMATION_SPEED_MAX","ANIMATION_SPEED_STEP","BAR_WIDTH_MIN","ANIMATION_DEFAULT_BACKGROUND_COLOR_BARS","ANIMATION_COMPARE_COLOR","ANIMATION_SWAP_COLOR","ANIMATION_SORTED_COLOR","ANIMATION_PIVID_COLOR","defaultBackgroundColor","compareColor","swapColor","sortedColor","pividColor","resetAnimatedValues","arrayBars","document","getElementsByClassName","arrayBarStyle","innerHTML","backgroundColor","SecondaryButtons","chosenAlgorithm","chosenAlgorithmName","setIsSorting","animationSpeed","setArray","generateNewArray","timeoutValues","setTimeoutValues","isPaused","setIsPaused","sortedArray","timeoutsArray","animationType","first","second","firstValue","secondValue","firstStyle","secondStyle","time","Timeout","animate","newArray","_timeLeft","pause","curTime","reset","resume","ArraySize","arraySize","setArraySize","arraySizeTimeout","setArraySizeTimeout","maxArraySize","setMaxArraySize","newBarWidth","roundedBarWidth","marginRight","onChange","clearTimeout","curArraySizeTimeout","setTimeout","target","defaultValue","type","min","toString","max","step","AnimationSpeed","setAnimationSpeed","randomIntFromInterval","random","generateArray","Number","Navbar","cancel","newGeneratedArray","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.48f562f8.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 19;","import { useState, useEffect } from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height,\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","const calculateBarWidth = (width: number, arrayLength: number) => {\r\n  const containerPadding = 30;\r\n  const barMarginRight = 2;\r\n\r\n  return Math.floor(\r\n    (width - containerPadding - arrayLength * barMarginRight) / arrayLength\r\n  );\r\n};\r\n\r\nexport default calculateBarWidth;\r\n","import Bar from \"./Bar\";\r\n\r\nexport default Bar;\r\n","import { FC } from \"react\";\r\nimport WindowDimensions from \"../../hooks/WindowDimensions\";\r\nimport calculateBarWidth from \"../../utils/calculateBarWidth\";\r\nimport \"./Bar.scss\";\r\n\r\ntype Props = {\r\n  array: number[];\r\n};\r\n\r\nconst Bar: FC<Props> = ({ array }) => {\r\n  const { width } = WindowDimensions();\r\n\r\n  const barWidth = calculateBarWidth(width, array.length);\r\n\r\n  return (\r\n    <div style={{ height: `${300 + 30}px` }} className=\"bar\">\r\n      {array.map((value: number, idx: number) => (\r\n        <div\r\n          style={{\r\n            height: `${value + 30}px`,\r\n            width: `${barWidth > 50 ? 50 : barWidth}px`,\r\n          }}\r\n          className={`bar-container ${barWidth < 40 && \"bar-container--small\"}`}\r\n          key={idx}\r\n        >\r\n          <p>{value}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bar;\r\n","import Home from \"./Home\";\r\n\r\nexport default Home;\r\n","import { FC } from \"react\";\r\nimport Bar from \"../../components/Bar\";\r\nimport \"./Home.scss\";\r\n\r\ntype Props = {\r\n  array: number[];\r\n};\r\n\r\nconst Home: FC<Props> = ({ array }) => {\r\n  return (\r\n    <div className=\"home page\">\r\n      <div className=\"container\">\r\n        <Bar array={array} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { animateValuesProps } from \"../utils/animate\";\r\n\r\nconst mergeSort = (array: number[]) => {\r\n  const arrayCopy = [...array];\r\n  const animateValues: animateValuesProps = [];\r\n\r\n  const extraArray = [...arrayCopy];\r\n  mergeSortHelper(\r\n    arrayCopy,\r\n    0,\r\n    arrayCopy.length - 1,\r\n    extraArray,\r\n    animateValues\r\n  );\r\n  return [animateValues, arrayCopy];\r\n};\r\n\r\nfunction mergeSortHelper(\r\n  mainArray: number[],\r\n  startIdx: number,\r\n  endIdx: number,\r\n  extraArray: number[],\r\n  animateValues: animateValuesProps\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(extraArray, startIdx, middleIdx, mainArray, animateValues);\r\n  mergeSortHelper(extraArray, middleIdx + 1, endIdx, mainArray, animateValues);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, extraArray, animateValues);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray: number[],\r\n  startIdx: number,\r\n  middleIdx: number,\r\n  endIdx: number,\r\n  extraArray: number[],\r\n  animateValues: animateValuesProps\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  const isLastMerge = startIdx === 0 && endIdx === mainArray.length - 1;\r\n\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    animateValues.push([\"compare\", i, j]);\r\n    animateValues.push([\"remove\", i, j]);\r\n    if (isLastMerge) animateValues.push([\"sorted\", i]);\r\n\r\n    if (extraArray[i] <= extraArray[j]) {\r\n      animateValues.push([\"overwrite-height\", k, extraArray[i]]);\r\n      if (isLastMerge) animateValues.push([\"sorted\", k]);\r\n      mainArray[k++] = extraArray[i++];\r\n    } else {\r\n      animateValues.push([\"overwrite-height\", k, extraArray[j]]);\r\n      if (isLastMerge) animateValues.push([\"sorted\", k]);\r\n      mainArray[k++] = extraArray[j++];\r\n    }\r\n  }\r\n\r\n  while (i <= middleIdx) {\r\n    animateValues.push([\"compare\", i, j]);\r\n    animateValues.push([\"remove\", i, j]);\r\n    if (isLastMerge) animateValues.push([\"sorted\", i]);\r\n    animateValues.push([\"overwrite-height\", k, extraArray[i]]);\r\n    if (isLastMerge) animateValues.push([\"sorted\", k]);\r\n    mainArray[k++] = extraArray[i++];\r\n  }\r\n\r\n  while (j <= endIdx) {\r\n    animateValues.push([\"compare\", i, j]);\r\n    animateValues.push([\"remove\", i, j]);\r\n    if (isLastMerge) animateValues.push([\"sorted\", i]);\r\n    animateValues.push([\"overwrite-height\", k, extraArray[j]]);\r\n    if (isLastMerge) animateValues.push([\"sorted\", k]);\r\n    mainArray[k++] = extraArray[j++];\r\n  }\r\n}\r\n\r\nexport default mergeSort;\r\n","import { animateValuesProps } from \"../utils/animate\";\r\n\r\nconst quickSort = (array: number[]) => {\r\n  const arrayCopy = [...array];\r\n  const animateValues: animateValuesProps = [];\r\n\r\n  quickSortHelper(arrayCopy, 0, arrayCopy.length - 1, animateValues);\r\n  return [animateValues, arrayCopy];\r\n};\r\n\r\nfunction quickSortHelper(\r\n  array: number[],\r\n  startIdx: number,\r\n  endIdx: number,\r\n  animateValues: animateValuesProps\r\n) {\r\n  if (startIdx === endIdx) {\r\n    animateValues.push([\"sorted\", startIdx]);\r\n  }\r\n  if (startIdx >= endIdx) return;\r\n\r\n  const pividIdx = startIdx;\r\n  let firstIdx = startIdx + 1;\r\n  let secondIdx = endIdx;\r\n\r\n  animateValues.push([\"pivid\", pividIdx]);\r\n  while (secondIdx >= firstIdx) {\r\n    animateValues.push([\"compare\", firstIdx, secondIdx]);\r\n    animateValues.push([\"remove\", firstIdx, secondIdx]);\r\n\r\n    if (\r\n      array[firstIdx] > array[pividIdx] &&\r\n      array[secondIdx] < array[pividIdx]\r\n    ) {\r\n      swap(array, firstIdx, secondIdx, animateValues);\r\n    }\r\n\r\n    if (array[pividIdx] >= array[firstIdx]) firstIdx++;\r\n    if (array[pividIdx] <= array[secondIdx]) secondIdx--;\r\n  }\r\n\r\n  animateValues.push([\"remove\", pividIdx]);\r\n  swap(array, pividIdx, secondIdx, animateValues);\r\n\r\n  animateValues.push([\"sorted\", pividIdx]);\r\n  animateValues.push([\"sorted\", secondIdx]);\r\n\r\n  let isLeftSubarrayGreater =\r\n    secondIdx - 1 - startIdx >= endIdx - (secondIdx + 1);\r\n  if (isLeftSubarrayGreater) {\r\n    quickSortHelper(array, secondIdx + 1, endIdx, animateValues);\r\n    quickSortHelper(array, startIdx, secondIdx - 1, animateValues);\r\n  } else {\r\n    quickSortHelper(array, startIdx, secondIdx - 1, animateValues);\r\n    quickSortHelper(array, secondIdx + 1, endIdx, animateValues);\r\n  }\r\n}\r\n\r\nfunction swap(\r\n  array: number[],\r\n  i: number,\r\n  j: number,\r\n  animateValues: animateValuesProps\r\n) {\r\n  animateValues.push([\"swap-background-color\", i, j]);\r\n  animateValues.push([\"swap-height\", i, j, array[i], array[j]]);\r\n  animateValues.push([\"remove\", i, j]);\r\n\r\n  const temp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = temp;\r\n}\r\n\r\nexport default quickSort;\r\n","import { animateValuesProps } from \"../utils/animate\";\r\n\r\nconst heapSort = (array: number[]) => {\r\n  const arrayCopy = [...array];\r\n  const animateValues: animateValuesProps = [];\r\n\r\n  buildMaxHeap(arrayCopy, animateValues);\r\n  for (let endIdx = arrayCopy.length - 1; endIdx > 0; endIdx--) {\r\n    swap(arrayCopy, 0, endIdx, animateValues);\r\n    animateValues.push([\"sorted\", endIdx]);\r\n    siftDown(0, endIdx - 1, arrayCopy, animateValues);\r\n  }\r\n\r\n  animateValues.push([\"sorted\", 0]);\r\n  return [animateValues, arrayCopy];\r\n};\r\n\r\nfunction buildMaxHeap(array: number[], animateValues: animateValuesProps) {\r\n  const firstParentIdx = Math.floor((array.length - 2) / 2);\r\n  for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\r\n    siftDown(currentIdx, array.length - 1, array, animateValues);\r\n  }\r\n}\r\n\r\nfunction siftDown(\r\n  currentIdx: number,\r\n  endIdx: number,\r\n  heap: number[],\r\n  animateValues?: animateValuesProps\r\n) {\r\n  let childOneIdx = currentIdx * 2 + 1;\r\n  while (childOneIdx <= endIdx) {\r\n    const childTwoIdx = currentIdx * 2 + 2 <= endIdx ? currentIdx * 2 + 2 : -1;\r\n    let idxToSwap;\r\n    if (childTwoIdx !== -1 && heap[childTwoIdx] > heap[childOneIdx]) {\r\n      idxToSwap = childTwoIdx;\r\n    } else {\r\n      idxToSwap = childOneIdx;\r\n    }\r\n\r\n    if (animateValues) {\r\n      animateValues.push([\"compare\", idxToSwap, currentIdx]);\r\n    }\r\n    if (heap[idxToSwap] > heap[currentIdx]) {\r\n      swap(heap, currentIdx, idxToSwap, animateValues);\r\n      currentIdx = idxToSwap;\r\n      childOneIdx = currentIdx * 2 + 1;\r\n    } else {\r\n      if (animateValues) {\r\n        animateValues.push([\"remove\", idxToSwap, currentIdx]);\r\n      }\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nfunction swap(\r\n  array: number[],\r\n  i: number,\r\n  j: number,\r\n  animateValues?: animateValuesProps\r\n) {\r\n  if (animateValues) {\r\n    animateValues.push([\"swap-background-color\", i, j]);\r\n    animateValues.push([\"swap-height\", i, j, array[i], array[j]]);\r\n  }\r\n\r\n  const temp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = temp;\r\n\r\n  if (animateValues) {\r\n    animateValues.push([\"remove\", i, j]);\r\n  }\r\n}\r\n\r\nexport default heapSort;\r\n","import { animateValuesProps } from \"../utils/animate\";\r\n\r\nconst bubbleSort = (array: number[]) => {\r\n  const arrayCopy = [...array];\r\n  const animateValues: animateValuesProps = [];\r\n\r\n  let counter: number = 0;\r\n  let isSorted: boolean = false;\r\n\r\n  while (!isSorted) {\r\n    isSorted = true;\r\n\r\n    for (let i = 1; i < array.length - counter; i++) {\r\n      const firstIdx = i - 1;\r\n      const secondIdx = i;\r\n      animateValues.push([\"compare\", firstIdx, secondIdx]);\r\n\r\n      if (arrayCopy[firstIdx] > arrayCopy[secondIdx]) {\r\n        swap(arrayCopy, firstIdx, secondIdx, animateValues);\r\n        isSorted = false;\r\n      }\r\n      animateValues.push([\"remove\", firstIdx, secondIdx]);\r\n    }\r\n\r\n    animateValues.push([\"sorted\", array.length - counter - 1]);\r\n    counter++;\r\n  }\r\n\r\n  return [animateValues, arrayCopy];\r\n};\r\n\r\nfunction swap(\r\n  array: number[],\r\n  i: number,\r\n  j: number,\r\n  animateValues: animateValuesProps\r\n) {\r\n  animateValues.push([\"swap-background-color\", i, j]);\r\n  animateValues.push([\"swap-height\", i, j, array[i], array[j]]);\r\n\r\n  const temp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = temp;\r\n}\r\n\r\nexport default bubbleSort;\r\n","import { animateValuesProps } from \"../utils/animate\";\r\n\r\nconst insertionSort = (array: number[]) => {\r\n  const arrayCopy = [...array];\r\n  const animateValues: animateValuesProps = [];\r\n\r\n  for (let i = 1; i < array.length; i++) {\r\n    let j = i;\r\n\r\n    while (j > 0) {\r\n      const firstIdx = j - 1;\r\n      const secondIdx = j;\r\n\r\n      animateValues.push([\"compare\", firstIdx, secondIdx]);\r\n      if (arrayCopy[j] >= arrayCopy[j - 1]) {\r\n        animateValues.push([\"remove\", firstIdx, secondIdx]);\r\n        animateValues.push([\"sorted\", firstIdx]);\r\n        animateValues.push([\"sorted\", secondIdx]);\r\n        break;\r\n      }\r\n\r\n      swap(arrayCopy, firstIdx, secondIdx, animateValues);\r\n      j -= 1;\r\n\r\n      animateValues.push([\"remove\", firstIdx, secondIdx]);\r\n      if (firstIdx === 0) {\r\n        animateValues.push([\"sorted\", firstIdx]);\r\n      }\r\n      animateValues.push([\"sorted\", secondIdx]);\r\n    }\r\n  }\r\n\r\n  return [animateValues, arrayCopy];\r\n};\r\n\r\nfunction swap(\r\n  array: number[],\r\n  i: number,\r\n  j: number,\r\n  animateValues: animateValuesProps\r\n) {\r\n  animateValues.push([\"swap-background-color\", i, j]);\r\n  animateValues.push([\"swap-height\", i, j, array[i], array[j]]);\r\n\r\n  const temp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = temp;\r\n}\r\n\r\nexport default insertionSort;\r\n","import { animateValuesProps } from \"../utils/animate\";\r\n\r\nconst selectionSort = (array: number[]) => {\r\n  const arrayCopy = [...array];\r\n  const animateValues: animateValuesProps = [];\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    let smallest = i;\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      const firstIdx = smallest;\r\n      const secondIdx = j;\r\n\r\n      animateValues.push([\"compare\", firstIdx, secondIdx]);\r\n      animateValues.push([\"remove\", firstIdx, secondIdx]);\r\n      if (arrayCopy[smallest] > arrayCopy[j]) {\r\n        smallest = j;\r\n      }\r\n    }\r\n\r\n    const firstIdx = i;\r\n    const secondIdx = smallest;\r\n    if (i !== smallest) {\r\n      animateValues.push([\"compare\", firstIdx, secondIdx]);\r\n      animateValues.push([\"swap-background-color\", firstIdx, secondIdx]);\r\n      animateValues.push([\r\n        \"swap-height\",\r\n        firstIdx,\r\n        secondIdx,\r\n        arrayCopy[firstIdx],\r\n        arrayCopy[secondIdx],\r\n      ]);\r\n\r\n      const temp = arrayCopy[firstIdx];\r\n      arrayCopy[firstIdx] = arrayCopy[secondIdx];\r\n      arrayCopy[secondIdx] = temp;\r\n    }\r\n    animateValues.push([\"remove\", firstIdx, secondIdx]);\r\n    animateValues.push([\"sorted\", firstIdx]);\r\n  }\r\n\r\n  return [animateValues, arrayCopy];\r\n};\r\n\r\nexport default selectionSort;\r\n","import Algorithms from \"./Algorithms\";\r\n\r\nexport default Algorithms;\r\n","import { FC, Dispatch, SetStateAction } from \"react\";\r\nimport mergeSortAlgorithm from \"../../../../algorithms/mergeSort\";\r\nimport quickSortAlgorithm from \"../../../../algorithms/quickSort\";\r\nimport heapSortAlgorithm from \"../../../../algorithms/heapSort\";\r\nimport bubbleSortAlgorithm from \"../../../../algorithms/bubbleSort\";\r\nimport insertionSortAlgorithm from \"../../../../algorithms/insertionSort\";\r\nimport selectionSortAlgorithm from \"../../../../algorithms/selectionSort\";\r\nimport \"./Algorithms.scss\";\r\n\r\ntype Props = {\r\n  setChosenAlgorithm: any;\r\n  setChosenAlgorithmName: Dispatch<SetStateAction<string | undefined>>;\r\n  isSorting: boolean;\r\n};\r\n\r\nconst Algorithms: FC<Props> = ({\r\n  setChosenAlgorithm,\r\n  setChosenAlgorithmName,\r\n  isSorting,\r\n}) => {\r\n  const algorithmsList = [\r\n    {\r\n      name: \"Merge Sort\",\r\n      onClick: () => {\r\n        setChosenAlgorithmName(\"Merge Sort\");\r\n        setChosenAlgorithm(() => mergeSortAlgorithm);\r\n      },\r\n    },\r\n    {\r\n      name: \"Quick Sort\",\r\n      onClick: () => {\r\n        setChosenAlgorithmName(\"Quick Sort\");\r\n        setChosenAlgorithm(() => quickSortAlgorithm);\r\n      },\r\n    },\r\n    {\r\n      name: \"Heap Sort\",\r\n      onClick: () => {\r\n        setChosenAlgorithmName(\"Heap Sort\");\r\n        setChosenAlgorithm(() => heapSortAlgorithm);\r\n      },\r\n    },\r\n    {\r\n      name: \"Bubble Sort\",\r\n      onClick: () => {\r\n        setChosenAlgorithm(() => bubbleSortAlgorithm);\r\n        setChosenAlgorithmName(\"Bubble Sort\");\r\n      },\r\n    },\r\n    {\r\n      name: \"Insertion Sort\",\r\n      onClick: () => {\r\n        setChosenAlgorithm(() => insertionSortAlgorithm);\r\n        setChosenAlgorithmName(\"Insertion Sort\");\r\n      },\r\n    },\r\n    {\r\n      name: \"Selection Sort\",\r\n      onClick: () => {\r\n        setChosenAlgorithm(() => selectionSortAlgorithm);\r\n        setChosenAlgorithmName(\"Selection Sort\");\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"algorithms-list\">\r\n      {algorithmsList.map(\r\n        (curAlgorithm: { name: string; onClick: any }, index: number) => {\r\n          return (\r\n            <button\r\n              disabled={isSorting}\r\n              className=\"btn\"\r\n              onClick={curAlgorithm.onClick}\r\n              key={index}\r\n            >\r\n              {curAlgorithm.name}\r\n            </button>\r\n          );\r\n        }\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Algorithms;\r\n","const config = {\r\n  ARRAY_SIZE_DEFAULT: 120,\r\n  ARRAY_SIZE_MIN: 20,\r\n  ARRAY_SIZE_MAX: 120,\r\n  ARRAY_SIZE_STEP: 10,\r\n  ANIMATION_SPEED_DEFAULT: 1, //ms\r\n  ANIMATION_SPEED_MIN: 1, //ms\r\n  ANIMATION_SPEED_MAX: 1000, //ms\r\n  ANIMATION_SPEED_STEP: 1,\r\n  BAR_WIDTH_MIN: 2, //px\r\n  ANIMATION_DEFAULT_BACKGROUND_COLOR_BARS: \"#2ca08b\",\r\n  ANIMATION_COMPARE_COLOR: \"orange\",\r\n  ANIMATION_SWAP_COLOR: \"red\",\r\n  ANIMATION_SORTED_COLOR: \"purple\",\r\n  ANIMATION_PIVID_COLOR: \"black\",\r\n};\r\n\r\nexport default config;\r\n","import { Dispatch, SetStateAction } from \"react\";\r\nimport { Timeout } from \"managed-timeout\";\r\n\r\nimport config from \"./../config\";\r\nconst {\r\n  ANIMATION_DEFAULT_BACKGROUND_COLOR_BARS,\r\n  ANIMATION_COMPARE_COLOR,\r\n  ANIMATION_SWAP_COLOR,\r\n  ANIMATION_SORTED_COLOR,\r\n  ANIMATION_PIVID_COLOR,\r\n} = config;\r\n\r\nexport type animateValuesProps = [string, number, number?, number?, number?][];\r\n\r\nconst defaultBackgroundColor = ANIMATION_DEFAULT_BACKGROUND_COLOR_BARS;\r\nconst compareColor = ANIMATION_COMPARE_COLOR;\r\nconst swapColor = ANIMATION_SWAP_COLOR;\r\nconst sortedColor = ANIMATION_SORTED_COLOR;\r\nconst pividColor = ANIMATION_PIVID_COLOR;\r\n\r\nconst animate = (\r\n  animateValues: animateValuesProps,\r\n  animationSpeed: number,\r\n  setIsSorting: Dispatch<SetStateAction<boolean>>,\r\n  sortedArray: number[],\r\n  setArray: Dispatch<SetStateAction<number[]>>\r\n) => {\r\n  const timeoutsArray = [];\r\n\r\n  for (let i = 0; i < animateValues.length; i++) {\r\n    const arrayBars = document.getElementsByClassName(\"bar-container\");\r\n    const [animationType, first, second, firstValue, secondValue] =\r\n      animateValues[i];\r\n    const firstStyle = arrayBars[first] as HTMLElement;\r\n    const secondStyle = second && (arrayBars[second] as HTMLElement);\r\n\r\n    //ANIMATION TYPES\r\n    let time = new Timeout(() => {\r\n      //COMPARE\r\n      if (animationType === \"compare\") {\r\n        firstStyle.style.backgroundColor = compareColor;\r\n        if (secondStyle) secondStyle.style.backgroundColor = compareColor;\r\n      }\r\n\r\n      //SWAP BACKGROUND COLOR\r\n      else if (animationType === \"swap-background-color\") {\r\n        firstStyle.style.backgroundColor = swapColor;\r\n        if (secondStyle) secondStyle.style.backgroundColor = swapColor;\r\n      }\r\n\r\n      //OVERWRITE HEIGHT\r\n      else if (animationType === \"overwrite-height\") {\r\n        firstStyle.innerHTML = `<p>${second}</p>`;\r\n        firstStyle.style.height = `${(second || 0) + 30}px`;\r\n      }\r\n\r\n      //SWAP HEIGHT\r\n      else if (animationType === \"swap-height\") {\r\n        firstStyle.innerHTML = `<p>${secondValue}</p>`;\r\n        firstStyle.style.height = `${(secondValue || 0) + 30}px`;\r\n\r\n        if (secondStyle) secondStyle.innerHTML = `<p>${firstValue}</p>`;\r\n        if (secondStyle)\r\n          secondStyle.style.height = `${(firstValue || 0) + 30}px`;\r\n      }\r\n\r\n      //SORTED\r\n      else if (animationType === \"sorted\") {\r\n        firstStyle.style.backgroundColor = sortedColor;\r\n      } else if (animationType === \"pivid\") {\r\n        firstStyle.style.backgroundColor = pividColor;\r\n      }\r\n\r\n      //REMOVE\r\n      else if (animationType === \"remove\") {\r\n        firstStyle.style.backgroundColor = defaultBackgroundColor;\r\n        if (secondStyle)\r\n          secondStyle.style.backgroundColor = defaultBackgroundColor;\r\n      }\r\n    }, i * animationSpeed);\r\n    timeoutsArray.push(time);\r\n  }\r\n\r\n  const time = new Timeout(() => {\r\n    setArray(sortedArray);\r\n    setIsSorting(false);\r\n  }, animateValues.length * animationSpeed);\r\n  timeoutsArray.push(time);\r\n\r\n  return timeoutsArray;\r\n};\r\n\r\nconst resetAnimatedValues = (array: number[]) => {\r\n  const arrayBars = document.getElementsByClassName(\"bar-container\");\r\n  for (let i = 0; i < array.length; i++) {\r\n    const arrayBarStyle = arrayBars[i] as HTMLElement;\r\n\r\n    if (arrayBarStyle) {\r\n      arrayBarStyle.innerHTML = `<p>${array[i]}</p>`;\r\n      arrayBarStyle.style.backgroundColor = defaultBackgroundColor;\r\n    }\r\n  }\r\n};\r\n\r\nexport { animate, resetAnimatedValues };\r\n","import SecondaryButtons from \"./SecondaryButtons\";\r\n\r\nexport default SecondaryButtons;\r\n","import { FC, Dispatch, SetStateAction } from \"react\";\r\nimport { animate, resetAnimatedValues } from \"../../../../utils/animate\";\r\n\r\nimport \"./SecondaryButtons.scss\";\r\n\r\ntype Props = {\r\n  chosenAlgorithm: any;\r\n  chosenAlgorithmName: string | undefined;\r\n  isSorting: boolean;\r\n  setIsSorting: Dispatch<SetStateAction<boolean>>;\r\n  animationSpeed: number;\r\n  array: number[];\r\n  setArray: Dispatch<SetStateAction<number[]>>;\r\n  generateNewArray: () => number[];\r\n  timeoutValues: any[];\r\n  setTimeoutValues: Dispatch<SetStateAction<any[]>>;\r\n  isPaused: boolean;\r\n  setIsPaused: Dispatch<SetStateAction<boolean>>;\r\n};\r\n\r\nconst SecondaryButtons: FC<Props> = ({\r\n  isSorting,\r\n  chosenAlgorithm,\r\n  chosenAlgorithmName,\r\n  setIsSorting,\r\n  animationSpeed,\r\n  array,\r\n  setArray,\r\n  generateNewArray,\r\n  timeoutValues,\r\n  setTimeoutValues,\r\n  isPaused,\r\n  setIsPaused,\r\n}) => {\r\n  const handleSort = () => {\r\n    if (!chosenAlgorithm) return;\r\n    setIsSorting(true);\r\n    resetAnimatedValues(array);\r\n    const [animateValues, sortedArray] = chosenAlgorithm(array);\r\n    const timeoutValues = animate(\r\n      animateValues,\r\n      animationSpeed,\r\n      setIsSorting,\r\n      sortedArray,\r\n      setArray\r\n    );\r\n    setTimeoutValues(timeoutValues);\r\n  };\r\n\r\n  const pause = () => {\r\n    setIsPaused(true);\r\n    const newArray = [];\r\n\r\n    for (const time of timeoutValues) {\r\n      if (time._timeLeft > 0) {\r\n        time.pause();\r\n        newArray.push(time);\r\n      }\r\n    }\r\n    setTimeoutValues(newArray);\r\n  };\r\n\r\n  const resume = () => {\r\n    setIsPaused(false);\r\n    let curTime = 0;\r\n\r\n    for (const time of timeoutValues) {\r\n      time.reset(curTime);\r\n      time.resume();\r\n      curTime += animationSpeed;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"secondary-buttons\">\r\n      <button\r\n        className=\"btn btn--main\"\r\n        disabled={!chosenAlgorithm || isSorting}\r\n        onClick={handleSort}\r\n      >\r\n        {!chosenAlgorithm\r\n          ? \"Choose Algortihm\"\r\n          : `Visualize ${chosenAlgorithmName}`}\r\n      </button>\r\n      <button className=\"btn\" onClick={generateNewArray}>\r\n        Generate new array\r\n      </button>\r\n      <button\r\n        disabled={!isSorting ? true : isPaused}\r\n        className=\"btn\"\r\n        onClick={pause}\r\n      >\r\n        Pause\r\n      </button>\r\n      <button\r\n        disabled={!isSorting ? true : !isPaused}\r\n        className=\"btn\"\r\n        onClick={resume}\r\n      >\r\n        Resume\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SecondaryButtons;\r\n","import {\r\n  FC,\r\n  useState,\r\n  useEffect,\r\n  CSSProperties,\r\n  Dispatch,\r\n  SetStateAction,\r\n} from \"react\";\r\nimport useWindowDimensions from \"../../../../hooks/WindowDimensions\";\r\nimport calculateBarWidth from \"../../../../utils/calculateBarWidth\";\r\nimport \"./ArraySize.scss\";\r\n\r\nimport config from \"../../../../config\";\r\nconst {\r\n  ARRAY_SIZE_DEFAULT,\r\n  ARRAY_SIZE_MIN,\r\n  ARRAY_SIZE_MAX,\r\n  ARRAY_SIZE_STEP,\r\n  BAR_WIDTH_MIN,\r\n} = config;\r\n\r\ntype Props = {\r\n  array: number[];\r\n  isSorting: boolean;\r\n  arraySize: number;\r\n  style?: CSSProperties;\r\n  setArraySize: Dispatch<SetStateAction<number>>;\r\n};\r\n\r\nconst ArraySize: FC<Props> = ({\r\n  array,\r\n  isSorting,\r\n  arraySize,\r\n  style,\r\n  setArraySize,\r\n}) => {\r\n  const [arraySizeTimeout, setArraySizeTimeout] = useState<any>();\r\n  const [maxArraySize, setMaxArraySize] = useState<number>(ARRAY_SIZE_DEFAULT);\r\n\r\n  const { width } = useWindowDimensions();\r\n\r\n  useEffect(() => {\r\n    const barWidth = calculateBarWidth(width, array.length);\r\n    const newBarWidth = Math.floor((width - 30) / 4);\r\n    const roundedBarWidth = newBarWidth - (newBarWidth % 10);\r\n\r\n    setMaxArraySize(\r\n      roundedBarWidth > ARRAY_SIZE_MAX ? ARRAY_SIZE_MAX : roundedBarWidth\r\n    );\r\n\r\n    if (barWidth < BAR_WIDTH_MIN) {\r\n      setArraySize(newBarWidth > ARRAY_SIZE_MAX ? ARRAY_SIZE_MAX : newBarWidth);\r\n    }\r\n  }, [width]);\r\n\r\n  const handleArraySizeChange = (e: any) => {\r\n    clearTimeout(arraySizeTimeout);\r\n    const curArraySizeTimeout = setTimeout(() => {\r\n      setArraySize(e.target.value);\r\n    }, 10);\r\n\r\n    setArraySizeTimeout(curArraySizeTimeout);\r\n  };\r\n\r\n  return (\r\n    <div style={style} className=\"array-size\">\r\n      <p style={{ marginRight: \"10px\" }}>array size</p>\r\n      <input\r\n        style={{ marginRight: \"10px\" }}\r\n        disabled={isSorting}\r\n        onChange={handleArraySizeChange}\r\n        defaultValue={arraySize}\r\n        type=\"range\"\r\n        id=\"arraySize\"\r\n        name=\"arraySize\"\r\n        min={ARRAY_SIZE_MIN.toString()}\r\n        max={maxArraySize.toString()}\r\n        step={ARRAY_SIZE_STEP.toString()}\r\n      />\r\n      <p>{arraySize < 100 ? `0${arraySize}` : arraySize}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArraySize;\r\n","import ArraySize from \"./ArraySize\";\r\n\r\nexport default ArraySize;\r\n","import { FC, Dispatch, SetStateAction } from \"react\";\r\nimport config from \"../../../../config\";\r\nimport \"./AnimationSpeed.scss\";\r\n\r\nconst { ANIMATION_SPEED_MIN, ANIMATION_SPEED_MAX, ANIMATION_SPEED_STEP } =\r\n  config;\r\n\r\ntype Props = {\r\n  isSorting: boolean;\r\n  animationSpeed: number;\r\n  setAnimationSpeed: Dispatch<SetStateAction<number>>;\r\n  isPaused: boolean;\r\n};\r\n\r\nconst AnimationSpeed: FC<Props> = ({\r\n  isSorting,\r\n  animationSpeed,\r\n  setAnimationSpeed,\r\n  isPaused,\r\n}) => {\r\n  const handleSpeedChange = (e: any) => {\r\n    setAnimationSpeed(ANIMATION_SPEED_MAX - e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"animation-speed\">\r\n      <p style={{ marginRight: \"10px\" }}>animation speed:</p>\r\n      <input\r\n        style={{ marginRight: \"10px\" }}\r\n        disabled={isPaused ? false : isSorting}\r\n        onChange={handleSpeedChange}\r\n        defaultValue={ANIMATION_SPEED_MAX - animationSpeed}\r\n        type=\"range\"\r\n        id=\"speed\"\r\n        name=\"speed\"\r\n        min=\"0\"\r\n        max={(ANIMATION_SPEED_MAX - ANIMATION_SPEED_MIN).toString()}\r\n        step={ANIMATION_SPEED_STEP.toString()}\r\n      />\r\n      <p>{animationSpeed}ms</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnimationSpeed;\r\n","import AnimationSpeed from \"./AnimationSpeed\";\r\n\r\nexport default AnimationSpeed;\r\n","const generateArray = (length = 20, min = 10, max = 300) => {\r\n  const array: number[] = [];\r\n  for (let i = 30; i < Number(length) + 30; i++) {\r\n    array.push(randomIntFromInterval(min, max));\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\nfunction randomIntFromInterval(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default generateArray;\r\n","import { FC, useEffect, useState, Dispatch, SetStateAction } from \"react\";\r\nimport Algorithms from \"./components/Algorithms\";\r\nimport SecondaryButtons from \"./components/SecondaryButtons\";\r\nimport ArraySize from \"./components/ArraySize\";\r\nimport AnimationSpeed from \"./components/AnimationSpeed\";\r\nimport generateArray from \"../../utils/generateArray\";\r\nimport { resetAnimatedValues } from \"../../utils/animate\";\r\nimport \"./Navbar.scss\";\r\n\r\nimport config from \"../../config\";\r\nconst { ARRAY_SIZE_DEFAULT, ANIMATION_SPEED_DEFAULT } = config;\r\n\r\ntype Props = {\r\n  array: number[];\r\n  setArray: Dispatch<SetStateAction<number[]>>;\r\n};\r\n\r\nconst Navbar: FC<Props> = ({ array, setArray }) => {\r\n  const [animationSpeed, setAnimationSpeed] = useState(ANIMATION_SPEED_DEFAULT);\r\n  const [timeoutValues, setTimeoutValues] = useState<any[]>([]);\r\n  const [chosenAlgorithm, setChosenAlgorithm] = useState<any>();\r\n  const [chosenAlgorithmName, setChosenAlgorithmName] = useState<string>();\r\n  const [arraySize, setArraySize] = useState(ARRAY_SIZE_DEFAULT);\r\n  const [isSorting, setIsSorting] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n\r\n  useEffect(() => {\r\n    generateNewArray();\r\n  }, [arraySize]);\r\n\r\n  const generateNewArray = () => {\r\n    setIsPaused(false);\r\n    for (const time of timeoutValues) {\r\n      time.cancel();\r\n    }\r\n    setTimeoutValues([]);\r\n\r\n    const newGeneratedArray = generateArray(arraySize);\r\n    setArray(newGeneratedArray);\r\n    resetAnimatedValues(newGeneratedArray);\r\n    setIsSorting(false);\r\n    return newGeneratedArray;\r\n  };\r\n\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"container\">\r\n        <div className=\"navbar__top\">\r\n          <Algorithms\r\n            isSorting={isSorting}\r\n            setChosenAlgorithm={setChosenAlgorithm}\r\n            setChosenAlgorithmName={setChosenAlgorithmName}\r\n          />\r\n          <SecondaryButtons\r\n            isSorting={isSorting}\r\n            chosenAlgorithm={chosenAlgorithm}\r\n            chosenAlgorithmName={chosenAlgorithmName}\r\n            setIsSorting={setIsSorting}\r\n            animationSpeed={animationSpeed}\r\n            array={array}\r\n            setArray={setArray}\r\n            generateNewArray={generateNewArray}\r\n            timeoutValues={timeoutValues}\r\n            setTimeoutValues={setTimeoutValues}\r\n            isPaused={isPaused}\r\n            setIsPaused={setIsPaused}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"navbar__bottom\">\r\n          <ArraySize\r\n            array={array}\r\n            style={{ marginRight: \"40px\" }}\r\n            isSorting={isSorting}\r\n            arraySize={arraySize}\r\n            setArraySize={setArraySize}\r\n          />\r\n          <AnimationSpeed\r\n            isSorting={isSorting}\r\n            animationSpeed={animationSpeed}\r\n            setAnimationSpeed={setAnimationSpeed}\r\n            isPaused={isPaused}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import Navbar from \"./Navbar\";\r\n\r\nexport default Navbar;\r\n","import { useState } from \"react\";\nimport Home from \"./pages/Home\";\nimport Navbar from \"./components/Navbar\";\n\nfunction App() {\n  const [array, setArray] = useState<number[]>([]);\n\n  return (\n    <>\n      <Navbar array={array} setArray={setArray} />\n      <Home array={array} />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/styles/base.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}